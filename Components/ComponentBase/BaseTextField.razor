@inherits ComponentBase
@namespace BlazorControlPanel.Components.ComponentBase
@typeparam T
@using System.Linq.Expressions

<MudTextField @bind-Value="@Value"
              Label="@Label"
              Placeholder="@Placeholder"
              HelperText="@HelperText"
              Required="@Required"
              RequiredError="@RequiredError"
              Disabled="@Disabled"
              ReadOnly="@ReadOnly"
              Variant="@Variant"
              Margin="@Margin"
              Class="@Class"
              Style="@Style"
              Adornment="@Adornment"
              AdornmentIcon="@AdornmentIcon"
              AdornmentText="@AdornmentText"
              AdornmentColor="@AdornmentColor"
              IconSize="@IconSize"
              OnAdornmentClick="@OnAdornmentClick"
              Validation="@Validation"
              For="@For"
              Immediate="@Immediate"
              DebounceInterval="@DebounceInterval"
              OnDebounceIntervalElapsed="@OnDebounceIntervalElapsed"
              OnBlur="@OnBlur"
              OnInternalInputChanged="@OnInternalInputChanged"
              Lines="@Lines"
              MaxLines="@MaxLines"
              AutoGrow="@AutoGrow"
              InputType="@InputType"
              Pattern="@Pattern"
              Counter="@Counter"
              MaxLength="@MaxLength"
              T="T" />

@code {
    [Parameter] public T? Value { get; set; }
    [Parameter] public EventCallback<T> ValueChanged { get; set; }
    [Parameter] public string? Label { get; set; }
    [Parameter] public string? Placeholder { get; set; }
    [Parameter] public string? HelperText { get; set; }
    [Parameter] public bool Required { get; set; }
    [Parameter] public string RequiredError { get; set; } = "Required";
    [Parameter] public bool Disabled { get; set; }
    [Parameter] public bool ReadOnly { get; set; }
    [Parameter] public Variant Variant { get; set; } = Variant.Text;
    [Parameter] public Margin Margin { get; set; } = Margin.None;
    [Parameter] public string? Class { get; set; }
    [Parameter] public string? Style { get; set; }
    [Parameter] public Adornment Adornment { get; set; } = Adornment.None;
    [Parameter] public string? AdornmentIcon { get; set; }
    [Parameter] public string? AdornmentText { get; set; }
    [Parameter] public Color AdornmentColor { get; set; } = Color.Default;
    [Parameter] public Size IconSize { get; set; } = Size.Medium;
    [Parameter] public EventCallback<MouseEventArgs> OnAdornmentClick { get; set; }
    [Parameter] public object? Validation { get; set; }
    [Parameter] public Expression<Func<T>>? For { get; set; }
    [Parameter] public bool Immediate { get; set; }
    [Parameter] public double DebounceInterval { get; set; } = 300;
    [Parameter] public EventCallback<string> OnDebounceIntervalElapsed { get; set; }
    [Parameter] public EventCallback<FocusEventArgs> OnBlur { get; set; }
    [Parameter] public EventCallback<ChangeEventArgs> OnInternalInputChanged { get; set; }
    [Parameter] public int Lines { get; set; } = 1;
    [Parameter] public int MaxLines { get; set; } = 1000;
    [Parameter] public bool AutoGrow { get; set; }
    [Parameter] public InputType InputType { get; set; } = InputType.Text;
    [Parameter] public string? Pattern { get; set; }
    [Parameter] public int? Counter { get; set; }
    [Parameter] public int MaxLength { get; set; } = 524288;
}
