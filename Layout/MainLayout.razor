@*
    Project: Blazor Control Panel
    Date: 2025-08-08
    Author: J Schneider - j.g@live.com

    Main Layout Component
    Primary layout component that defines the overall structure and appearance of the application.
    Provides the main navigation, theme management, and responsive layout framework.

    Features:
    - Responsive navigation drawer
    - Theme switching (light/dark mode)
    - Application header with branding
    - MudBlazor provider setup
    - Consistent layout structure
    - Mobile-friendly responsive design
*@

@inherits LayoutComponentBase
@inject IUIPersonalizationService UIPersonalizationService
@inject IJSRuntime JSRuntime

<BaseThemeProvider @ref="@_mudThemeProvider" @bind-IsDarkMode="@_isDarkMode" />
<BaseProviders />

<BaseLayout>
    <BaseAppBar Elevation="1" Color="Color.Primary">
        <BaseIconButton Icon="@Icons.Material.Filled.Menu"
                       Color="Color.Inherit"
                       Edge="Edge.Start"
                       OnClick="@ToggleDrawer" />
        <BaseSpacer />
        <BaseText Typo="Typo.h6" Class="ml-3">Control Painel CRM</BaseText>
        <BaseSpacer />
        <BaseIconButton Icon="@(_isDarkMode ? Icons.Material.Filled.LightMode : Icons.Material.Filled.DarkMode)"
                       Color="Color.Inherit"
                       OnClick="@ToggleTheme" />
    </BaseAppBar>

    <BaseDrawer @bind-Open="_drawerOpen"
               Elevation="1"
               Variant="DrawerVariant.Mini">
        <NavMenu />
    </BaseDrawer>

    <BaseMainContent Class="pt-16 px-16">
        <BaseContainer MaxWidth="MaxWidth.False" Class="my-16 pt-16">
            @Body
        </BaseContainer>
    </BaseMainContent>
</BaseLayout>

@code {
    private bool _drawerOpen = true;
    private bool _isDarkMode = false;
    private BaseThemeProvider? _mudThemeProvider;

    protected override async Task OnInitializedAsync()
    {
        var settings = await UIPersonalizationService.GetUISettingsAsync();
        _isDarkMode = settings.DarkMode;
        _drawerOpen = settings.ShowSidebar;

        await UIPersonalizationService.LogAccessAsync("Layout Initialized");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && _mudThemeProvider?.ThemeProviderRef != null)
        {
            _isDarkMode = await _mudThemeProvider.ThemeProviderRef.GetSystemDarkModeAsync();
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task ToggleDrawer()
    {
        _drawerOpen = !_drawerOpen;
        var settings = await UIPersonalizationService.GetUISettingsAsync();
        settings.ShowSidebar = _drawerOpen;
        await UIPersonalizationService.SaveUISettingsAsync(settings);
    }

    private async Task ToggleTheme()
    {
        _isDarkMode = !_isDarkMode;
        var settings = await UIPersonalizationService.GetUISettingsAsync();
        settings.DarkMode = _isDarkMode;
        await UIPersonalizationService.SaveUISettingsAsync(settings);
    }
}