@inherits LayoutComponentBase
@inject IUIPersonalizationService UIPersonalizationService
@inject IJSRuntime JSRuntime

<MudThemeProvider @ref="@_mudThemeProvider" @bind-IsDarkMode="@_isDarkMode" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <BaseAppBar Elevation="1" Color="Color.Primary">
        <BaseIconButton Icon="@Icons.Material.Filled.Menu"
                       Color="Color.Inherit"
                       Edge="Edge.Start"
                       OnClick="@ToggleDrawer" />
        <MudSpacer />
        <MudText Typo="Typo.h6" Class="ml-3">Control Painel CRM</MudText>
        <MudSpacer />
        <BaseIconButton Icon="@(_isDarkMode ? Icons.Material.Filled.LightMode : Icons.Material.Filled.DarkMode)"
                       Color="Color.Inherit"
                       OnClick="@ToggleTheme" />
    </BaseAppBar>

    <BaseDrawer @bind-Open="_drawerOpen"
               Elevation="1"
               Variant="DrawerVariant.Mini">
        <NavMenu />
    </BaseDrawer>

    <MudMainContent Class="pt-16 px-16">
        <MudContainer MaxWidth="MaxWidth.False" Class="my-16 pt-16">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    private bool _drawerOpen = true;
    private bool _isDarkMode = false;
    private MudThemeProvider? _mudThemeProvider;

    protected override async Task OnInitializedAsync()
    {
        var settings = await UIPersonalizationService.GetUISettingsAsync();
        _isDarkMode = settings.DarkMode;
        _drawerOpen = settings.ShowSidebar;

        await UIPersonalizationService.LogAccessAsync("Layout Initialized");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && _mudThemeProvider != null)
        {
            _isDarkMode = await _mudThemeProvider.GetSystemPreference();
            StateHasChanged();
        }
    }

    private async Task ToggleDrawer()
    {
        _drawerOpen = !_drawerOpen;
        var settings = await UIPersonalizationService.GetUISettingsAsync();
        settings.ShowSidebar = _drawerOpen;
        await UIPersonalizationService.SaveUISettingsAsync(settings);
    }

    private async Task ToggleTheme()
    {
        _isDarkMode = !_isDarkMode;
        var settings = await UIPersonalizationService.GetUISettingsAsync();
        settings.DarkMode = _isDarkMode;
        await UIPersonalizationService.SaveUISettingsAsync(settings);
    }
}